name: GraalVM Native Image build
on:
  push:
    branches: [ main ]
    tags: [ '*' ]

jobs:
  buildOnWindows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ilammy/msvc-dev-cmd@v1.5.0
      - uses: microsoft/setup-msbuild@v1
      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.1.0'
          java-version: '11'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build with Maven
        run: mvn -DskipTests -B clean verify gluonfx:build --file pom.xml
        shell: powershell
#      - name: Run UPX
#        uses: crazy-max/ghaction-upx@v1.3.3
#        with:
#          version: latest
#          file: target/gluonfx/x86_64-windows/my-application.exe
#          args: '-7'
      - name: Extract Maven project version
        run: Write-Output "RELEASE_VERSION=$(cmd /c mvn help:evaluate -Dexpression='project.version' -q -DforceStdout)" >> $env:GITHUB_ENV
        shell: powershell
        id: project
#      - name: Upload binaries to release
#        uses: svenstaro/upload-release-action@v2
#        with:
#          repo_token: ${{ secrets.GITHUB_TOKEN }}
#          file: target/gluonfx/x86_64-windows/my-application.exe
#          asset_name: my-application-windows-x86_64.exe
#          tag: ${{ env.RELEASE_VERSION }}
#          release_name: My Application version ${{ env.RELEASE_VERSION }}
#          overwrite: true
#          body: "My Application"
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: warn
          name: my-application-windows-x86_64
          path: target/gluonfx/x86_64-windows/my-application.exe

  buildOnLinux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: graalvm/setup-graalvm@v1
        with:
          version: '22.1.0'
          java-version: '11'
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install missing libs
        run: sudo apt-get install -y -qq libasound2-dev libavcodec-dev libavformat-dev libavutil-dev libgl-dev libgtk-3-dev libpango1.0-dev libxtst-dev
      - name: Build with Maven
        run: mvn -DskipTests -B clean verify gluonfx:build --file pom.xml
      - name: Run UPX
        uses: crazy-max/ghaction-upx@v1.3.3
        with:
          version: latest
          file: target/gluonfx/x86_64-linux/my-application
          args: '-7'
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: warn
          name: my-application-linux-x86_64
          path: target/gluonfx/x86_64-linux/my-application

  createRelease:
      needs: [buildOnWindows, buildOnLinux]
      runs-on: windows-latest
      outputs:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
      steps:
        - uses: actions/checkout@v2
        - uses: ilammy/msvc-dev-cmd@v1.5.0
        - uses: microsoft/setup-msbuild@v1
        - uses: graalvm/setup-graalvm@v1
          with:
            version: '22.1.0'
            java-version: '11'
            github-token: ${{ secrets.GITHUB_TOKEN }}
        - name: Extract Maven project version
          run: Write-Output "RELEASE_VERSION=$(cmd /c mvn help:evaluate -Dexpression='project.version' -q -DforceStdout)" >> $env:GITHUB_ENV
          shell: powershell
          id: project
        - name: Create release
          id: create_release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ env.RELEASE_VERSION }}
            release_name: My Application version ${{ env.RELEASE_VERSION }}
            draft: false
            prerelease: false

  releaseArtifacts:
      needs: createRelease
      runs-on: ubuntu-latest
      strategy:
        matrix:
          config:
                - platform: windows-x86_64
                - platform: linux-x86_64
      steps:
        - uses: actions/download-artifact@v3
          with:
            name: my-application-${{ matrix.config.platform }}
            path: torelease
        - name: Upload release assets
          if: matrix.config.platform != 'windows-x86_64'
          uses: actions/upload-release-asset@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
              upload_url: ${{ needs.createRelease.outputs.upload_url }}
              asset_name: my-application-${{ matrix.config.platform }}
              asset_path: ./torelease/my-application
              asset_content_type: application/octet-stream
        - name: Upload release assets
          if: matrix.config.platform == 'windows-x86_64'
          uses: actions/upload-release-asset@v1
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
              upload_url: ${{ needs.createRelease.outputs.upload_url }}
              asset_name: my-application-${{ matrix.config.platform }}.exe
              asset_path: ./torelease/my-application.exe
              asset_content_type: application/octet-stream

#        - uses: actions/download-artifact@v3
#          with:
#            path: torelease

#        - name: Upload binaries to release
#          uses: svenstaro/upload-release-action@v2
#          with:
#            repo_token: ${{ secrets.GITHUB_TOKEN }}
#            file: torelease/my-application/**/*
#            file_glob: true
#            tag: ${{ env.RELEASE_VERSION }}
#            release_name: My Application version ${{ env.RELEASE_VERSION }}
#            overwrite: true
#            body: "My Application"
